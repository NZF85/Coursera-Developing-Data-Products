sapply(split(mtcars$mpg,mtcars$cyl), mean)
mtcars[mtcars$cyl==4,]
abs(mean(mtcars[mtcars$cyl==4,]hp) - mean(mtcars[mtcars$cyl==8,]hp))
mtcars[mtcars$cyl==4,]
mtcars[mtcars$cyl==4,]|hp
mtcars[mtcars$cyl==4,]hp
mtcars[mtcars$cyl==4,],hp
abs(mean(mtcars[mtcars$cyl==4,]$hp) - mean(mtcars[mtcars$cyl==8,]$hp))
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
x
e
e
f<-rbinom(10)
f<-rbinom(10,5)
data(mtcars)
mtcars
narrow <- mtcars[, c("cyl", "gear", "vs", "mpg")]
narrow
library(reshape2)
wide1 <- tidied <- dcast(narrow, cyl + gear ~ vs, max)
wide1
wide2 <- tidied <- dcast(narrow, cyl + vs ~ gear, max)
wide2
x <- c(0.18, -1.54, 0.42, 0.95)
mns=NULL
lambda = 0.2
n = 40
set.seed(3)
## find the mean of a sample size of 40 with standard deviation 0.2
## find a 1000 of such means
for (i in 1 : 1000) mns = data.frame(c(mns, mean(rexp(n,lambda))))
mean(mns)
View(mns)
View(mns)
mns=NULL
lambda = 0.2
n = 40
set.seed(3)
## find the mean of a sample size of 40 with standard deviation 0.2
## find a 1000 of such means
for (i in 1 : 1000) mns = data.frame(mns, mean(rexp(n,lambda)))
for (i in 1 : 1000) mns = matrix(mns, mean(rexp(n,lambda)))
mns=NULL
for (i in 1 : 1000) mns = matrix(mns, mean(rexp(n,lambda)))
mns=0
for (i in 1 : 1000) mns = matrix(mns, mean(rexp(n,lambda)))
View(mns)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
z <- x*w
z
mean(z)
for (i in 1 : 1000) mns = c(mns, mean(rexp(n,lambda)))
View(mns)
lambda = 0.2
n = 40
set.seed(3)
for (i in 1 : 1000) mns = c(mns, mean(rexp(n,lambda)))
View(mns)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit.origin <- lm( y ~ x - 1 )
summary(fit.origin)
data(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
m.x <- mean(x)
sd.x <- sd(x)
(x[1] - m.x)/sd.x
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm( y ~ x )
mns=matrix
mns<-matrix
for (i in 1 : 1000) mns = cbind(mns, mean(rexp(n,lambda)))
View(mns)
mns = matrix(mean(rexp(n,lambda)),[1:1000])
mns = matrix(mean(rexp(n,lambda)),1000)
View(mns)
lambda = 0.2
n = 40
set.seed(3)
## find the mean of a sample size of 40 with standard deviation 0.2
## find a 1000 of such means
mns<-data.frame(x = sapply(nsms, function(x) {mean(rexp(n, lambda))}))
mns<-data.frame(x = sapply(1000, function(x) {mean(rexp(n, lambda))}))
View(mns)
mns<-data.frame(x = sapply(1:1000, function(x) {mean(rexp(n, lambda))}))
View(mns)
library(ggplot2)
ggplot(data = mns, aes(x = x)) +
geom_histogram(aes(y=..density..), fill = I('#00e6fa'), binwidth = 0.20, color = I('black')) +
stat_function(fun = dnorm, arg = list(mean = 5, sd = sd(means$x)))
stat_function(fun = dnorm, arg = list(mean = 5, sd = sd(mns$x)))
ggplot(data = mns, aes(x = x)) +
geom_histogram(aes(y=..density..), fill = I('#00e6fa'), binwidth = 0.20, color = I('black')) +
stat_function(fun = dnorm, arg = list(mean = 5, sd = sd(mns$x)))
ggplot(data = mns, aes(x = x)) +
geom_histogram(aes(y=..density..), fill = I('salmon'), binwidth = 0.20, color = I('black')) +
stat_function(fun = dnorm, arg = list(mean = 5, sd = sd(mns$x)))
mean(mns)
sd(mns)
var(mns)
mean(mns$x)
sd(mns$x)
var(mns$x)
library(ggplot2)
ggplot(data = mns, aes(x = x)) +
geom_histogram(aes(y=..density..), fill = I('salmon'), binwidth = 0.20, color = I('black')) +
stat_function(fun = dnorm, arg = list(mean = 5, sd = (1/lambda)/sqrt(40)))
library(ggplot2)
ggplot(data = mns, aes(x = x)) +
geom_histogram(aes(y=..density..), fill = I('salmon'), binwidth = 0.20, color = I('black')) +
stat_function(fun = dnorm, arg = list(mean = 5, sd = (1/lambda)/sqrt(40)))
library(ggplot2)
ggplot(data = mns, aes(x = x)) +
geom_histogram(aes(y=..density..), fill = I('salmon'), binwidth = 0.20, color = I('black')) +
stat_function(fun = dnorm, arg = list(mean = 5, sd = (1/lambda)/sqrt(40)))
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
library(swirl)
rm(list=ls())
swirl()
esc()
quit()
choose(5,4)
rnorm(1e+07, mean = 0.5, sd = sqrt(1/12))
library(swirl)
swirl()
10
coinPlot(10)
coinPlot(10000)
2
qnorm(.95)
0.6+c(-1,1)*qnorm(.975)*sqrt(0.6*0.4/100)
binom.test(60,100)$conf.int
mywald(.2)
AQCCompar(20)
ACCompar(20)
lamb=5/94.32
lamb<-5/94.32
lamb+c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)$conf
1
2
library(ggplot2)
library(datasets)
data(ToothGrowth)
str(ToothGrowth)
ggplot(ToothGrowth,aes(x=factor(dose),y=len,fill=factor(dose)))+
geom_bar(stat="identity") +
facet_grid(.~supp) +
scale_x_discrete("Dosage (Milligram)") +
scale_y_continuous("Length of Teeth") +
ggtitle("Exploratory Data Analyses")
supp.t1 <- t.test(len~supp, paired=F, var.equal=T, data=ToothGrowth)
supp.t1supp.t2 <- t.test(len~supp, paired=F, var.equal=F, data=ToothGrowth)
supp.result <- data.frame("p-value"=c(supp.t1$p.value, supp.t2$p.value),
"Conf-Low"=c(supp.t1$conf[1],supp.t2$conf[1]),
"Conf-High"=c(supp.t1$conf[2],supp.t2$conf[2]),
row.names=c("Equal Var","Unequal Var"))
supp.result
supp.t1 <- t.test(len~supp, paired=F, var.equal=T, data=ToothGrowth)
supp.t2 <- t.test(len~supp, paired=F, var.equal=F, data=ToothGrowth)
supp.result <- data.frame("p-value"=c(supp.t1$p.value, supp.t2$p.value),
"Conf-Low"=c(supp.t1$conf[1],supp.t2$conf[1]),
"Conf-High"=c(supp.t1$conf[2],supp.t2$conf[2]),
row.names=c("Equal Var","Unequal Var"))
supp.result
len~supp
View(ToothGrowth)
View(ToothGrowth)
rbind(
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==0.5,])
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==1,])
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==2,])
)
rbind(
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==0.5,])$p.value,
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==1,])$p.value,
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==2,])$p.value
)
data<-ToothGrowth
rbind(
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==0.5,])$p.value,
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==1,])$p.value,
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==2,])$p.value
)
data_05_1 <- subset(data, dose %in% c(0.5,1))
data_1_2 <- subset(data, dose %in% c(1,2))
rbind(
t.test(len ~ dose, paired=F, var.equal=F, data=data_05_1)
t.test(len ~ dose, paired=F, var.equal=F, data=data_1_2)
)
rbind(
t.test(len ~ dose, paired=F, var.equal=F, data=data_05_1)$p.value,
t.test(len ~ dose, paired=F, var.equal=F, data=data_1_2)$p.value
)
rbind(
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==0.5,])$conf,
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==1,])$conf,
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==2,])$conf
)
data(mtcars)
str(mtcars)
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
str(mtcars)
str(mtcars)
help(mtcars)
str(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs, labels=c('V-Engine','Straight'))
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
str(mtcars)
scatterplot.matrix(~mpg + cyl + disp + hp + drat + wt + qsec + vs + am + gear +
carb, data = mtcars, main = "Plot 1: Scatterplot Matrix")
library(car)
install(car)
install.packages(car)
install.packages("car")
library(car)
scatterplot.matrix(~mpg + cyl + disp + hp + drat + wt + qsec + vs + am + gear +
carb, data = mtcars, main = "Plot 1: Scatterplot Matrix")
scatterplotMatrix(~mpg + cyl + disp + hp + drat + wt + qsec + vs + am + gear +
carb, data = mtcars, main = "Plot 1: Scatterplot Matrix")
scatterplotMatrix(~mpg + cyl + disp + hp + drat + wt + qsec + vs + am + gear +
carb, data = mtcars, main = "Plot 1: Scatterplot Matrix")
```{r,warning=TRUE}
library(car)
```
boxplot(mpg ~ am, data = mtcars, main = "Plot 3: Miles per gallon by Transmission type",
xlab = "Transmission type", ylab = "Miles Per Gallon")
pairs(mtcars, panel=panel.smooth, main="Pair Graph of Motor Trend Car Road Tests")
ggplot(mtcars, aes(x=wt, y=mpg, group=am, color=am, height=3, width=3)) + geom_point() +
scale_colour_discrete(labels=c("Automatic", "Manual")) +
xlab("weight") + ggtitle("Scatter Plot of MPG vs. Weight by Transmission")
library(ggplot2)
ggplot(mtcars, aes(x=wt, y=mpg, group=am, color=am, height=3, width=3)) + geom_point() +
scale_colour_discrete(labels=c("Automatic", "Manual")) +
xlab("weight") + ggtitle("Scatter Plot of MPG vs. Weight by Transmission")
boxplot(mpg ~ am, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",
main="Boxplot of MPG vs. Transmission")
fullModel <- lm(mpg ~ ., data=mtcars)
summary(fullModel)
stepModel <- step(fullModel, k=log(nrow(mtcars)))
summary(stepModel) # results hidden
anova(fullModel,stepModel)
scatterplotMatrix(~mpg + cyl + disp + hp + drat + wt + qsec + vs + am + gear +
carb, data = mtcars, main = "Plot 1: Scatterplot Matrix")
par(mfrow=c(2, 2))
plot(stepModel)
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs, labels=c('V-Engine','Straight'))
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
options(warn=-1)
compare<-aov(mpg~., data=mtcars)
compare
cor(mtcars)
library(xtables)
library(xtable)
install.packages("xtable")
library(xtable)
xtable(compare)
xtable(compare, type=html)
xtable(compare, type="html")
View(compare)
print(xtable(compare), type="html")
?xtable
print(xtable(compare))
print(compare)
?aov
summary(compare)
corr <- cor(mtcars)
summary(corr)
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:am, data=mtcars)
summary(amIntWtModel)
corr<-cor(mtcars)
data(mtcars)
data(mtcars)
corr<-cor(mtcars)
summary(corr)
corr<-cor(mtcars)
corr
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:cyl, data=mtcars)
summary(amIntWtModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:am, data=mtcars)
summary(amIntWtModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + cyl, data=mtcars)
summary(amIntWtModel)
fullModel <- lm(mpg ~ ., data=mtcars)
summary(fullModel)
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs, labels=c('V-Engine','Straight'))
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
options(warn=-1)
fullModel <- lm(mpg ~ ., data=mtcars)
summary(fullModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:cyl, data=mtcars)
summary(amIntWtModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + cyl, data=mtcars)
summary(amIntWtModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:am, data=mtcars)
summary(amIntWtModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + cyl, data=mtcars)
summary(amIntWtModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + qsec:am, data=mtcars)
summary(amIntWtModel)
stepModel <- step(fullModel, k=log(nrow(mtcars)))
summary(stepModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:disp, data=mtcars)
summary(amIntWtModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:cyl, data=mtcars)
summary(amIntWtModel)
library(car)
scatterplotMatrix(~mpg + cyl + disp + hp + drat + wt + qsec + vs + am + gear +
carb, data = mtcars, main = "Plot 1: Scatterplot Matrix")
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:qsec, data=mtcars)
summary(amIntWtModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + qsec:am, data=mtcars)
summary(amIntWtModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:am, data=mtcars)
summary(amIntWtModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:am + qsec:am, data=mtcars)
summary(amIntWtModel)
Model1<-lm(mpg ~ wt + qsec + am + wt:am + qsec:am +qsec:wt, data=mtcars)
summary(Model1)
Model3<-lm(mpg ~ wt + qsec + am + qsec:wt + wt:am, data=mtcars)
summary(Model3)
?mtcars
Model1<-lm(mpg ~ wt + qsec + am + wt:am + qsec:am +qsec:wt, data=mtcars)
summary(Model1)
Model4<-lm(mpg ~ wt + qsec + am + wt:am, data=mtcars)
summary(Model4)
Model4<-lm(mpg ~ wt + qsec + am + wt*am, data=mtcars)
summary(Model4)
Model4<-lm(mpg ~ wt + qsec + am + wt*am, data=mtcars)
summary(Model4)
Model4<-lm(mpg ~ qsec + wt*am, data=mtcars)
summary(Model4)
Model2<-lm(mpg ~ qsec*am + wt, data=mtcars)
summary(Model2)
summary(Model2)
Model3<-lm(mpg ~ qsec*wt + am, data=mtcars)
summary(Model3)
Model4<-lm(mpg ~ qsec*wt*am, data=mtcars)
summary(Model4)
Model1<-lm(mpg ~ qsec + wt*am, data=mtcars)
summary(Model1)
summary(Model1)$coeff
anova(fullModel,stepModel,Model1)
Model2<-lm(mpg ~ qsec*am + wt, data=mtcars)
Model3<-lm(mpg ~ qsec*wt + am, data=mtcars)
Model4<-lm(mpg ~ qsec*wt*am, data=mtcars)
anova(fullModel,stepModel,Model1,Model2,Model3,Model4)
par(mfrow=c(2, 2))
plot(Model1)
summary(Model1)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram() + theme_bw()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ggplot(data = mtcars, aes(y = mpg, x = am)) +
geom_boxplot(aes(fill = am)) +
geom_jitter(aes(color = wt), size=4) +
ggtitle("Plot 2: Miles per gallon by Transmission type")+
theme_bw()
View(mtcars)
View(mtcars)
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs, labels=c('V-Engine','Straight'))
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
View(mtcars)
View(mtcars)
corr
corr<-cor(mtcars)
data(mtcars)
corr<-cor(mtcars)
corr
diag(corr)<-0
diag(corr)<-0
corr
plot(mtcars$cyl,mtcars$disp)
boxplot(mtcars$cyl,mtcars$disp)
plot(mtcars$cyl,mtcars$disp)
library(ggplot2)
ggplot(data = mtcars, aes(y = cyl, x = disp)) +
geom_boxplot(aes(fill = as.factor(am))) +
geom_jitter() +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = cyl, x = disp)) +
##geom_boxplot(aes(fill = as.factor(am))) +
geom_jitter() +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = cyl, x = disp)) +
##geom_boxplot(aes(fill = as.factor(am))) +
geom_jitter() +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = disp, x = cyl)) +
geom_boxplot() +
geom_jitter() +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = disp, x = cyl)) +
geom_boxplot(aes(fill = as.factor(cyl))) +
geom_jitter() +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = disp, x = cyl)) +
geom_boxplot(aes(fill = as.factor(cyl))) +
geom_jitter(aes(color = wt, size=4)) +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = disp, x = cyl)) +
geom_boxplot(aes(fill = as.factor(cyl))) +
geom_jitter(aes(color = wt, size=8)) +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = disp, x = cyl)) +
geom_boxplot(aes(fill = as.factor(cyl))) +
geom_jitter(aes(color = wt, size=85)) +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = disp, x = cyl)) +
geom_boxplot(aes(fill = as.factor(cyl))) +
geom_jitter(aes(color = wt), size =4) +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = disp, x = cyl)) +
geom_boxplot(aes(fill = as.factor(cyl))) +
geom_jitter(aes(color = wt), size =8) +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = disp, x = cyl)) +
geom_boxplot(aes(fill = as.factor(cyl))) +
geom_jitter(aes(color = wt), size =6) +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = disp, x = cyl)) +
geom_boxplot(aes(fill = as.factor(cyl))) +
geom_jitter(aes(color = wt), size =4) +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
View(corr)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain, ]
testing = adData[-inTrain, ]
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.9)
preProc$rotation
install.packages("shiny")
library(shiny)
runExample("01_hello")
shiny::runApp('C:/Users/user/Desktop/Coursera/Data products')
shiny::runApp('C:/Users/user/Desktop/Coursera/Data products')
shiny::runApp('C:/Users/user/Desktop/Coursera/Data products')
shiny::runApp('C:/Users/user/Desktop/Coursera/Data products')
shiny::runApp('C:/Users/user/Desktop/Coursera/Data products')
deployApp( )
deployApp()
library(shiny)
deployApp()
setwd("C:/Users/user/Desktop/Coursera/Data products")
deployApp()
shiny::runApp()
shiny::runApp()
install.packages("data.table")
install.packages("data.table")
